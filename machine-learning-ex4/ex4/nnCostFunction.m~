function [J grad] = nnCostFunction(nn_params, ...
                                   input_layer_size, ...
                                   hidden_layer_size, ...
                                   num_labels, ...
                                   X, y, lambda)
%NNCOSTFUNCTION Implements the neural network cost function for a two layer
%neural network which performs classification
%   [J grad] = NNCOSTFUNCTON(nn_params, hidden_layer_size, num_labels, ...
%   X, y, lambda) computes the cost and gradient of the neural network. The
%   parameters for the neural network are "unrolled" into the vector
%   nn_params and need to be converted back into the weight matrices. 
% 
%   The returned parameter grad should be a "unrolled" vector of the
%   partial derivatives of the neural network.
%

% Reshape nn_params back into the parameters Theta1 and Theta2, the weight matrices
% for our 2 layer neural network
Theta1 = reshape(nn_params(1:hidden_layer_size * (input_layer_size + 1)), ...
                 hidden_layer_size, (input_layer_size + 1));

Theta2 = reshape(nn_params((1 + (hidden_layer_size * (input_layer_size + 1))):end), ...
                 num_labels, (hidden_layer_size + 1));

% Setup some useful variables
Theta2_grad = zeros(size(Theta2));

% ====================== YOUR CODE HERE ======================
% Instructions: You should complete the code by working through the
%               following parts.
%
% Part 1: Feedforward the neural network and return the cost in the
%         variable J. After implementing Part 1, you can verify that your
%         cost function computation is correct by verifying the cost
%         computed in ex4.m
%
% Part 2: Implement the backpropagation algorithm to compute the gradients
%         Theta1_grad and Theta2_grad. You should return the partial derivatives of
%         the cost function with respect to Theta1 and Theta2 in Theta1_grad and
%         Theta2_grad, respectively. After implementing Part 2, you can check
%         that your implementation is correct by running checkNNGradients
%
%         Note: The vector y passed into the function is a vector of labels
%               containing values from 1..K. You need to map this vector into a 
%               binary vector of 1's and 0's to be used with the neural network
%               cost function.
%
%         Hint: We recommend implementing backpropagation using a for-loop
%               over the training examples if you are implementing it for the 
%               first time.
%
% Part 3: Implement regularization with the cost function and gradients.
%
%         Hint: You can implement this around the code for
%               backpropagation. That is, you can compute the gradients for
%               the regularization separately and then add them to Theta1_grad
%               and Theta2_grad from Part 2.
%

m = size(X, 1);
X = [ones(m, 1) X];    %size(X) is 5000 x 401
%size(Theta1) is 25 x 401
%a2 = sigmoid(Theta1 * X');    %size(a2) is 25 x 5000
%a2 = a2';    %size(a2) is 5000 x 25
%a2 = [ones(m, 1) a2];    %size(a2) is 5000 x 26
%size Theta2 is 10 x 26
%h = sigmoid(Theta2 * a2');    %size(a3) is 10 x 5000
J = 0;
Theta1_grad = zeros(size(Theta1));
Theta2_grad = zeros(size(Theta2, 1), size(Theta2, 2));

for i = 1:m
	a2 = sigmoid(Theta1 * X(i,:)');    %size 25 x 1
	a2 = [1; a2];    %size 26 x 1
    h = sigmoid(Theta2 * a2);    %size 10 x 1
    
	%boolean labels
	ybool = (1:num_labels)' == y(i);
	J = J + (1 / m) *  sum(-ybool .* log(h) - (1 - ybool) .* log(1 - h));
	
	% backpropagation
    delta3 = h - ybool;    % 10 x 1
	delta2 = Theta2' * delta3 .* (a2 .* (1 - a2));    % 26 x 1
	delta2 = delta2(2:end);	% 25 x 1
    Theta2_grad = Theta2_grad + delta3 * a2';    % 10 x 25
	Theta1_grad = Theta1_grad + delta2 * X(i,:);    % 25 x 401
end

%regularization
%m1 = size(Theta1, 2);	%max columns for theta1
%m2 = size(Theta2, 2);	%max columns for theta2
%regularization with theta1
r1 = sum(sum(Theta1(:,2:end) .^ 2));
%regularization with theta2
r2 = sum(sum(Theta2(:,2:end) .^ 2));
J = J + (lambda / (2 * m)) * (r1 + r2);

%unregularized gradients
Theta1_grad = Theta1_grad / m;
Theta2_grad = Theta2_grad / m;

%regularized gradients
for i = 1:size(Theta1_grad, 1)
		for j = 2:size(Theta1_grad, 2)
				Theta1_grad(i, j) = Theta1_grad(i, j) + (lambda / m) * Theta1(i,
				j);
		end
end

for i = 1:size(Theta2_grad, 1)
		for j = 2:size(Theta2_grad, 2)
				Theta2_grad(i, j) = Theta2_grad(i, j) + (lambda / m) * Theta(i,
				j);
		end
end







% -------------------------------------------------------------

% =========================================================================

% Unroll gradients
grad = [Theta1_grad(:) ; Theta2_grad(:)];


end
